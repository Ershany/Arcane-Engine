<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%ThreadingAtypeName</name>
  <shortName>%ThreadingAtypeShortName</shortName>
  <description>%ThreadingAtypeDescription</description>
  <shortDescription>%ThreadingAtypeShortDescription</shortDescription>
  <abbreviation>tr</abbreviation>
  <alias>threading</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <iconClass>analysis-parallelism solid</iconClass>
  <property name="helpId">configs.analysis_type_thread</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:if test="exsl:ctx('targetOS', '') = 'MacOSX'">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic')"/>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="commonDoc" select="document('config://collector/include/common.xsl')"/>
  <xsl:variable name="perfContextSwitchesState" select="$commonDoc//common/variables/perfContextSwitchesState"/>
  <xsl:variable name="usePerfForStacks" select="$commonDoc//common/variables/usePerfForStacks"/>
  <xsl:variable name="forceUnlimitedStack" select="(($usePerfForStacks='false') or ($perfContextSwitchesState!='available'))                                 and exsl:ctx('isVTSSPPDriverAvailable', 0)"/>
  <xsl:variable name="knobsParams">
   <params samplingIntervalApplyKnob="samplingAndWaits" samplingIntervalApplyKnobValue="hw" forceUnlimitedStack="{$forceUnlimitedStack}"/>
  </xsl:variable>
  <xsl:variable name="knobsParamsName">
   <xsl:text>config://analysis_type/include/knobs.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($knobsParams)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%ThreadingEfficiencyViewpointName</defaultValue>
  </stringKnob>
  <stringKnob id="allowedViewpoints" boolean:visible="false">
   <defaultValue>%ThreadingEfficiencyViewpointName</defaultValue>
  </stringKnob>
  <groupKnob id="groupForCustomControl">
   <knobProperty name="knob_control_id">threadingGroup</knobProperty>
   <knobs>
    <enumKnob id="samplingAndWaits" displayName="%SamplingMode" cliName="sampling-and-waits" boolean:visible="true">
     <description>%SamplingModeDescription</description>
     <values>
      <value displayName="%SoftwareSamplingAndTracing" cliName="sw">sw</value>
      <value displayName="%HardwareSamplingAndContextSwitches" cliName="hw">hw</value>
      <defaultValue>sw</defaultValue>
     </values>
    </enumKnob>
    <xsl:copy-of select="$commonKnobs//knobs/doubleKnob[@id='samplingInterval']"/>
    <booleanKnob id="enableStackCollect" displayName="%EnableStackCollection" cliName="enable-stack-collection">
     <xsl:if test="not(exsl:is_experimental('sep-lbr')) and exsl:ctx('targetOS', '') = 'MacOSX'">
      <xsl:attribute name="boolean:visible">false</xsl:attribute>
     </xsl:if>
     <description>%EnableStackCollectionDescription</description>
     <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>
    <xsl:copy-of select="$commonKnobs//knobs/enumKnob[@id='stackSizeCollect']"/>
   </knobs>
  </groupKnob>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
  <xsl:variable name="mainEvents" select="$events//events/cpi"/>
  <xsl:variable name="retiredEvents" select="$events//events/retired"/>
  <collector id="runss">
   <xsl:choose>
    <xsl:when test="exsl:ctx('samplingAndWaits', 'sw')='sw'">
     <xsl:if test="not(exsl:ctx('isTPSSAvailable', 0))">
      <xsl:value-of select="exsl:error('%RunssThreadingNotSupported')"/>
     </xsl:if>
     <xsl:if test="exsl:ctx('isPtraceScopeLimited', 0)">
      <xsl:value-of select="exsl:error('%RunssPtraceScopeLimited')"/>
     </xsl:if>
     <collectorKnob knob="collectSamplesMode">stack</collectorKnob>
     <collectorKnob knob="collectWaitsMode">stack</collectorKnob>
     <collectorKnob knob="collectIoMode">stack</collectorKnob>
     <collectorKnob knob="collectSignalsMode">stack</collectorKnob>
     <collectorKnob knob="samplingInterval">10</collectorKnob>
     <boolean:collectorKnob knob="collectUserTasksEventsCountersMode">true</boolean:collectorKnob>
     <boolean:collectorKnob knob="collectOpenMPRegions">true</boolean:collectorKnob>
     <xsl:if test="exsl:ctx('isPytraceAvailable', 0)">
      <xsl:choose>
       <xsl:when test="exsl:ctx('targetOS', '') = 'Windows'">
        <collectorKnob knob="mrteType">java,dotnet,python</collectorKnob>
       </xsl:when>
       <xsl:when test="exsl:ctx('targetOS', '') = 'Linux'">
        <collectorKnob knob="mrteType">java,python</collectorKnob>
       </xsl:when>
      </xsl:choose>
     </xsl:if>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="id">runsa</xsl:attribute>
     <xsl:copy-of select="document('config://analysis_type/include/prerequisites.xsl')/pmu_prerequisites/*"/>
     <collectorKnob knob="collectUserTasksEventsCountersMode">true</collectorKnob>
     <collectorKnob knob="eventMode">all</collectorKnob>
     <collectorKnob knob="enableCSwitch">true</collectorKnob>
     <xsl:copy-of select="document('config://analysis_type/include/knobs.xsl')//knobs/stackSizeKnobLogic/*"/>
     <collectorKnob knob="enableStackCollection">
      <xsl:copy-of select="exsl:ctx('enableStackCollect', 0)"/>
     </collectorKnob>
     <boolean:collectorKnob knob="collectOpenMPRegions">true</boolean:collectorKnob>
     <collectorKnob knob="pmuEventConfig">
      <xsl:value-of select="$mainEvents"/>
      <xsl:if test="$retiredEvents and $retiredEvents != ''">
       <xsl:text>,</xsl:text>
       <xsl:value-of select="$retiredEvents"/>
      </xsl:if>
     </collectorKnob>
     <collectorKnob knob="pmuSamplingInterval">
      <xsl:value-of select="format-number(exsl:ctx('samplingInterval', 1), '#.####')"/>
     </collectorKnob>
     <xsl:if test="exsl:is_experimental('ehfi')">
      <collectorKnob knob="analyzeEHFIClasses">true</collectorKnob>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </collector>
 </analysis>
</bag>
